#!/usr/bin/env bash
# This script was generated by bashly 1.1.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
wpe_cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli - A helper tool to run waypaper engine from the command line\n"
    echo

  else
    printf "wpe-cli - A helper tool to run waypaper engine from the command line\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wpe-cli COMMAND\n"
  printf "  wpe-cli [COMMAND] --help | -h\n"
  printf "  wpe-cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize the waypaper engine daemon\n" "daemon          "
  printf "  %s   Send a request to the daemon to set the next image in the playlist\n" "next-image      "
  printf "  %s   Send a request to the daemon to set the previous image in the playlist\n" "previous-image  "
  printf "  %s   Send a request to the daemon to stop it\n" "stop-daemon     "
  printf "  %s   Send a request to the daemon to pause the current playlist\n" "pause-playlist  "
  printf "  %s   Send a request to the daemon to resume the current playlist\n" "resume-playlist "
  printf "  %s   Send a request to the daemon to stop the current playlist\n" "stop-playlist   "
  printf "  %s   run the waypaper engine application\n" "run-app         "
  printf "  %s   set a random image from the gallery\n" "set-random-image"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
wpe_cli_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli daemon - Initialize the waypaper engine daemon\n"
    echo

  else
    printf "wpe-cli daemon - Initialize the waypaper engine daemon\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli daemon\n"
  printf "  wpe-cli daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli daemon\n"
    echo

  fi
}

# :command.usage
wpe_cli_next_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli next-image - Send a request to the daemon to set the next image in the playlist\n"
    echo

  else
    printf "wpe-cli next-image - Send a request to the daemon to set the next image in the playlist\n"
    echo

  fi

  printf "Alias: ni\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli next-image\n"
  printf "  wpe-cli next-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli next-image\n"
    echo

  fi
}

# :command.usage
wpe_cli_previous_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli previous-image - Send a request to the daemon to set the previous image in the playlist\n"
    echo

  else
    printf "wpe-cli previous-image - Send a request to the daemon to set the previous image in the playlist\n"
    echo

  fi

  printf "Alias: pi\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli previous-image\n"
  printf "  wpe-cli previous-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli previous-image\n"
    echo

  fi
}

# :command.usage
wpe_cli_stop_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli stop-daemon - Send a request to the daemon to stop it\n"
    echo

  else
    printf "wpe-cli stop-daemon - Send a request to the daemon to stop it\n"
    echo

  fi

  printf "Alias: sd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli stop-daemon\n"
  printf "  wpe-cli stop-daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli stop-daemon\n"
    echo

  fi
}

# :command.usage
wpe_cli_pause_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli pause-playlist - Send a request to the daemon to pause the current playlist\n"
    echo

  else
    printf "wpe-cli pause-playlist - Send a request to the daemon to pause the current playlist\n"
    echo

  fi

  printf "Alias: pp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli pause-playlist\n"
  printf "  wpe-cli pause-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli pause-playlist\n"
    echo

  fi
}

# :command.usage
wpe_cli_resume_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli resume-playlist - Send a request to the daemon to resume the current playlist\n"
    echo

  else
    printf "wpe-cli resume-playlist - Send a request to the daemon to resume the current playlist\n"
    echo

  fi

  printf "Alias: rp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli resume-playlist\n"
  printf "  wpe-cli resume-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli resume-playlist\n"
    echo

  fi
}

# :command.usage
wpe_cli_stop_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  else
    printf "wpe-cli stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  fi

  printf "Alias: sp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli stop-playlist\n"
  printf "  wpe-cli stop-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli stop-playlist\n"
    echo

  fi
}

# :command.usage
wpe_cli_run_app_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli run-app - run the waypaper engine application\n"
    echo

  else
    printf "wpe-cli run-app - run the waypaper engine application\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli run-app\n"
  printf "  wpe-cli run-app --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli run-app\n"
    echo

  fi
}

# :command.usage
wpe_cli_set_random_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "wpe-cli set-random-image - set a random image from the gallery\n"
    echo

  else
    printf "wpe-cli set-random-image - set a random image from the gallery\n"
    echo

  fi

  printf "Alias: sri\n"
  echo

  printf "%s\n" "Usage:"
  printf "  wpe-cli set-random-image\n"
  printf "  wpe-cli set-random-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  wpe-cli set-random-image\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
wpe_cli_daemon_command() {
  # src/daemon_command.sh
  run_daemon() {
        waypaper-engine.AppImage --daemon 2>/dev/null || echo "waypaper engine is not on the path, make sure to add it before running this command"
  }

  run_daemon & > /dev/null

}

# :command.function
wpe_cli_next_image_command() {
  # src/next_image_command.sh

  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n $1 | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  next_image(){
    send_message '{"action":"next-image"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  next_image

}

# :command.function
wpe_cli_previous_image_command() {
  # src/previous_image_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  previous_image(){
    send_message '{"action":"previous-image"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  previous_image

}

# :command.function
wpe_cli_stop_daemon_command() {
  # src/stop_daemon_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  stop_daemon(){
    send_message '{"action":"stop-daemon"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  stop_daemon

}

# :command.function
wpe_cli_pause_playlist_command() {
  # src/pause_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  pause_playlist(){
    send_message '{"action":"pause-playlist"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  pause_playlist

}

# :command.function
wpe_cli_resume_playlist_command() {
  # src/resume_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  resume_playlist(){
    send_message '{"action":"resume-playlist"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  resume_playlist

}

# :command.function
wpe_cli_stop_playlist_command() {
  # src/stop_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  stop_playlist(){
    send_message '{"action":"stop-playlist"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  stop_playlist
}

# :command.function
wpe_cli_run_app_command() {
  # src/run_app_command.sh
  run_app(){
    waypaper-engine.AppImage 2>/dev/null || echo "waypaper engine is not on the path, make sure to add it before running this command"
  }

  run_app & > /dev/null

}

# :command.function
wpe_cli_set_random_image_command() {
  # src/set_random_image_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  random_image(){
    send_message '{"action":"random-image"}' 2>/dev/null || echo "Seems like the daemon is not running, make sure to run 'wpe-cli daemon' first"
  }

  random_image

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        wpe_cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    daemon | d)
      action="daemon"
      shift
      wpe_cli_daemon_parse_requirements "$@"
      shift $#
      ;;

    next-image | ni)
      action="next-image"
      shift
      wpe_cli_next_image_parse_requirements "$@"
      shift $#
      ;;

    previous-image | pi)
      action="previous-image"
      shift
      wpe_cli_previous_image_parse_requirements "$@"
      shift $#
      ;;

    stop-daemon | sd)
      action="stop-daemon"
      shift
      wpe_cli_stop_daemon_parse_requirements "$@"
      shift $#
      ;;

    pause-playlist | pp)
      action="pause-playlist"
      shift
      wpe_cli_pause_playlist_parse_requirements "$@"
      shift $#
      ;;

    resume-playlist | rp)
      action="resume-playlist"
      shift
      wpe_cli_resume_playlist_parse_requirements "$@"
      shift $#
      ;;

    stop-playlist | sp)
      action="stop-playlist"
      shift
      wpe_cli_stop_playlist_parse_requirements "$@"
      shift $#
      ;;

    run-app | r)
      action="run-app"
      shift
      wpe_cli_run_app_parse_requirements "$@"
      shift $#
      ;;

    set-random-image | sri)
      action="set-random-image"
      shift
      wpe_cli_set_random_image_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      wpe_cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_next_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_next_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="next-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_previous_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_previous_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="previous-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_stop_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_stop_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_pause_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_pause_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="pause-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_resume_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_resume_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="resume-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_stop_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_stop_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_run_app_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_run_app_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run-app"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
wpe_cli_set_random_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        wpe_cli_set_random_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set-random-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "daemon") wpe_cli_daemon_command ;;
    "next-image") wpe_cli_next_image_command ;;
    "previous-image") wpe_cli_previous_image_command ;;
    "stop-daemon") wpe_cli_stop_daemon_command ;;
    "pause-playlist") wpe_cli_pause_playlist_command ;;
    "resume-playlist") wpe_cli_resume_playlist_command ;;
    "stop-playlist") wpe_cli_stop_playlist_command ;;
    "run-app") wpe_cli_run_app_command ;;
    "set-random-image") wpe_cli_set_random_image_command ;;
  esac
}

initialize
run "$@"
