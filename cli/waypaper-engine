#!/usr/bin/env bash
# This script was generated by bashly 1.1.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
waypaper_engine_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine - A wallpaper setting tool with playlist functionality\n"
    echo

  else
    printf "waypaper-engine - A wallpaper setting tool with playlist functionality\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  waypaper-engine COMMAND\n"
  printf "  waypaper-engine [COMMAND] --help | -h\n"
  printf "  waypaper-engine --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run just the waypaper engine daemon\n" "daemon         "
  printf "  %s   Send a request to the daemon to set the next image in the playlist\n" "next-image     "
  printf "  %s   Send a request to the daemon to set the previous image in the playlist\n" "previous-image "
  printf "  %s   Kill the waypaper daemon process\n" "kill-daemon    "
  printf "  %s   Send stop command to daemon process\n" "stop-daemon    "
  printf "  %s   Send a request to the daemon to pause the current playlist\n" "pause-playlist "
  printf "  %s   Send a request to the daemon to resume the current playlist\n" "resume-playlist"
  printf "  %s   Send a request to the daemon to stop the current playlist\n" "stop-playlist  "
  printf "  %s   run the waypaper engine application (default)\n" "run            "
  printf "  %s   set a random image from the gallery\n" "random         "
  printf "  %s   get playlist diagnostics\n" "info           "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
waypaper_engine_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine daemon - Run just the waypaper engine daemon\n"
    echo

  else
    printf "waypaper-engine daemon - Run just the waypaper engine daemon\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine daemon [OPTIONS]\n"
  printf "  waypaper-engine daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--script, -s SCRIPT"
    printf "    Script to run on each image set, the image path will be passed as argument.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine daemon\n"
    printf "  waypaper-engine daemon -s \"/path/to/your/script.sh\"\n"
    printf "  waypaper-engine daemon --script \"/path/to/your/script.sh\"\n"
    echo

  fi
}

# :command.usage
waypaper_engine_next_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine next-image - Send a request to the daemon to set the next image in the playlist\n"
    echo

  else
    printf "waypaper-engine next-image - Send a request to the daemon to set the next image in the playlist\n"
    echo

  fi

  printf "Alias: ni\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine next-image\n"
  printf "  waypaper-engine next-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine next-image\n"
    echo

  fi
}

# :command.usage
waypaper_engine_previous_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine previous-image - Send a request to the daemon to set the previous image in the playlist\n"
    echo

  else
    printf "waypaper-engine previous-image - Send a request to the daemon to set the previous image in the playlist\n"
    echo

  fi

  printf "Alias: pi\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine previous-image\n"
  printf "  waypaper-engine previous-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine previous-image\n"
    echo

  fi
}

# :command.usage
waypaper_engine_kill_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine kill-daemon - Kill the waypaper daemon process\n"
    echo

  else
    printf "waypaper-engine kill-daemon - Kill the waypaper daemon process\n"
    echo

  fi

  printf "Alias: kd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine kill-daemon\n"
  printf "  waypaper-engine kill-daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine kill-daemon\n"
    printf "  waypaper-engine kd\n"
    echo

  fi
}

# :command.usage
waypaper_engine_stop_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine stop-daemon - Send stop command to daemon process\n"
    echo

  else
    printf "waypaper-engine stop-daemon - Send stop command to daemon process\n"
    echo

  fi

  printf "Alias: sd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine stop-daemon\n"
  printf "  waypaper-engine stop-daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine stop-daemon\n"
    printf "  waypaper-engine sd\n"
    echo

  fi
}

# :command.usage
waypaper_engine_pause_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine pause-playlist - Send a request to the daemon to pause the current playlist\n"
    echo

  else
    printf "waypaper-engine pause-playlist - Send a request to the daemon to pause the current playlist\n"
    echo

  fi

  printf "Alias: pp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine pause-playlist\n"
  printf "  waypaper-engine pause-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine pause-playlist\n"
    echo

  fi
}

# :command.usage
waypaper_engine_resume_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine resume-playlist - Send a request to the daemon to resume the current playlist\n"
    echo

  else
    printf "waypaper-engine resume-playlist - Send a request to the daemon to resume the current playlist\n"
    echo

  fi

  printf "Alias: rp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine resume-playlist\n"
  printf "  waypaper-engine resume-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine resume-playlist\n"
    echo

  fi
}

# :command.usage
waypaper_engine_stop_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  else
    printf "waypaper-engine stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  fi

  printf "Alias: sp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine stop-playlist\n"
  printf "  waypaper-engine stop-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine stop-playlist\n"
    echo

  fi
}

# :command.usage
waypaper_engine_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine run - run the waypaper engine application\n"
    echo

  else
    printf "waypaper-engine run - run the waypaper engine application\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine run [OPTIONS]\n"
  printf "  waypaper-engine run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--script, -s SCRIPT"
    printf "    Script to run on each image set, the image path will be passed as argument.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine\n"
    printf "  waypaper-engine run\n"
    printf "  waypaper-engine r -s \"/path/to/your/script.sh\"\n"
    echo

  fi
}

# :command.usage
waypaper_engine_random_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine random - set a random image from the gallery\n"
    echo

  else
    printf "waypaper-engine random - set a random image from the gallery\n"
    echo

  fi

  printf "Alias: ri\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine random\n"
  printf "  waypaper-engine random --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine random\n"
    printf "  waypaper-engine ri\n"
    echo

  fi
}

# :command.usage
waypaper_engine_info_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine info - get playlist diagnostics\n"
    echo

  else
    printf "waypaper-engine info - get playlist diagnostics\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine info\n"
  printf "  waypaper-engine info --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine info\n"
    printf "  waypaper-engine i\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
waypaper_engine_daemon_command() {
  # src/daemon_command.sh
  LOCATION="/opt/waypaper-engine/resources/daemon/daemon.js"
  COMMAND="node $LOCATION"

  if [ -n "${args[--script]}" ]; then
      COMMAND="$COMMAND --script=${args[--script]}"
  fi

  run_daemon() {
       $COMMAND || echo "Cannot start daemon, something went wrong in the installation"
  }

  run_daemon > /dev/null &

}

# :command.function
waypaper_engine_next_image_command() {
  # src/next_image_command.sh

  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n $1 | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  next_image(){
    send_message '{"action":"next-image"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  next_image

}

# :command.function
waypaper_engine_previous_image_command() {
  # src/previous_image_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  previous_image(){
    send_message '{"action":"previous-image"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  previous_image

}

# :command.function
waypaper_engine_kill_daemon_command() {
  # src/kill_daemon_command.sh
  kill_daemon() {
    killall wpe-daemon || echo "Waypaper daemon not running"
  }

  kill_daemon > /dev/null &
}

# :command.function
waypaper_engine_stop_daemon_command() {
  # src/stop_daemon_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  stop_daemon(){
    send_message '{"action":"stop-daemon"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  stop_daemon > /dev/null &

}

# :command.function
waypaper_engine_pause_playlist_command() {
  # src/pause_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  pause_playlist(){
    send_message '{"action":"pause-playlist"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  pause_playlist

}

# :command.function
waypaper_engine_resume_playlist_command() {
  # src/resume_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  resume_playlist(){
    send_message '{"action":"resume-playlist"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  resume_playlist

}

# :command.function
waypaper_engine_stop_playlist_command() {
  # src/stop_playlist_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  stop_playlist(){
    send_message '{"action":"stop-playlist"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  stop_playlist
}

# :command.function
waypaper_engine_run_command() {
  # src/run_command.sh
  LOCATION="/opt/waypaper-engine"
  COMMAND="$LOCATION"/waypaper-engine-bin
  COMMAND="$COMMAND --ozone-platform-hint=auto"

  if [ -n "${args[--script]}" ]; then
      COMMAND="$COMMAND --script=${args[--script]}"
  fi

  run_app(){
     $COMMAND || echo "Something went wrong, make sure waypaper engine is installed correctly"
  }

  run_app >/dev/null &

}

# :command.function
waypaper_engine_random_command() {
  # src/random_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message(){
    echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  random_image(){
    send_message '{"action":"random-image"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  random_image

}

# :command.function
waypaper_engine_info_command() {
  # src/info_command.sh
  SOCKET_CONNECTION='/tmp/waypaper_engine_daemon.sock'

  send_message() {
  	echo -n "$1" | socat - UNIX-CONNECT:"$SOCKET_CONNECTION"
  }

  get_info() {
  	send_message '{"action":"get-info"}' || echo "Seems like the daemon is not running, make sure to run 'waypaper-engine daemon' first"
  }

  get_info

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        waypaper_engine_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    daemon | d)
      action="daemon"
      shift
      waypaper_engine_daemon_parse_requirements "$@"
      shift $#
      ;;

    next-image | ni)
      action="next-image"
      shift
      waypaper_engine_next_image_parse_requirements "$@"
      shift $#
      ;;

    previous-image | pi)
      action="previous-image"
      shift
      waypaper_engine_previous_image_parse_requirements "$@"
      shift $#
      ;;

    kill-daemon | kd)
      action="kill-daemon"
      shift
      waypaper_engine_kill_daemon_parse_requirements "$@"
      shift $#
      ;;

    stop-daemon | sd)
      action="stop-daemon"
      shift
      waypaper_engine_stop_daemon_parse_requirements "$@"
      shift $#
      ;;

    pause-playlist | pp)
      action="pause-playlist"
      shift
      waypaper_engine_pause_playlist_parse_requirements "$@"
      shift $#
      ;;

    resume-playlist | rp)
      action="resume-playlist"
      shift
      waypaper_engine_resume_playlist_parse_requirements "$@"
      shift $#
      ;;

    stop-playlist | sp)
      action="stop-playlist"
      shift
      waypaper_engine_stop_playlist_parse_requirements "$@"
      shift $#
      ;;

    run | r)
      action="run"
      shift
      waypaper_engine_run_parse_requirements "$@"
      shift $#
      ;;

    random | ri)
      action="random"
      shift
      waypaper_engine_random_parse_requirements "$@"
      shift $#
      ;;

    info | i)
      action="info"
      shift
      waypaper_engine_info_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    *)
      action="run"
      waypaper_engine_run_parse_requirements "$@"
      shift $#
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --script | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--script']="$2"
          shift
          shift
        else
          printf "%s\n" "--script requires an argument: --script, -s SCRIPT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_next_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_next_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="next-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_previous_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_previous_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="previous-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_kill_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_kill_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="kill-daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_stop_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_stop_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_pause_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_pause_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="pause-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_resume_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_resume_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="resume-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_stop_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_stop_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --script | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--script']="$2"
          shift
          shift
        else
          printf "%s\n" "--script requires an argument: --script, -s SCRIPT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_random_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_random_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="random"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_info_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_info_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="info"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="1.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "daemon") waypaper_engine_daemon_command ;;
    "next-image") waypaper_engine_next_image_command ;;
    "previous-image") waypaper_engine_previous_image_command ;;
    "kill-daemon") waypaper_engine_kill_daemon_command ;;
    "stop-daemon") waypaper_engine_stop_daemon_command ;;
    "pause-playlist") waypaper_engine_pause_playlist_command ;;
    "resume-playlist") waypaper_engine_resume_playlist_command ;;
    "stop-playlist") waypaper_engine_stop_playlist_command ;;
    "run") waypaper_engine_run_command ;;
    "random") waypaper_engine_random_command ;;
    "info") waypaper_engine_info_command ;;
  esac
}

initialize
run "$@"
