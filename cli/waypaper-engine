#!/usr/bin/env bash
# This script was generated by bashly 1.1.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
waypaper_engine_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine - A wallpaper setting tool with batteries included!\n"
    echo

  else
    printf "waypaper-engine - A wallpaper setting tool with batteries included!\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  waypaper-engine COMMAND\n"
  printf "  waypaper-engine [COMMAND] --help | -h\n"
  printf "  waypaper-engine --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run the waypaper engine application\n" "run            "
  printf "  %s   Run just the waypaper engine daemon\n" "daemon         "
  printf "  %s   Send a request to the daemon to set the next image in the specified playlist\n" "next-image     "
  printf "  %s   Send a request to the daemon to set the previous image in the specified playlist\n" "previous-image "
  printf "  %s   Kill the waypaper daemon process\n" "kill-daemon    "
  printf "  %s   Send stop command to daemon process\n" "stop-daemon    "
  printf "  %s   Send a request to the daemon to pause the specified playlist\n" "pause-playlist "
  printf "  %s   Send a request to the daemon to resume the specified playlist\n" "resume-playlist"
  printf "  %s   Start a playlist from the interactive selection\n" "start-playlist "
  printf "  %s   Send a request to the daemon to stop the current playlist\n" "stop-playlist  "
  printf "  %s   Set a random image from the gallery\n" "random         "
  printf "  %s   Get active playlists diagnostics\n" "info-playlist  "
  printf "  %s   Get monitors info and it's currently displayed images.\n" "info           "
  printf "  %s   Launch interactive playlist controller\n" "playlist       "
  printf "  %s   Launch interactive image history\n" "history        "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
waypaper_engine_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine run - Run the waypaper engine application\n"
    echo

  else
    printf "waypaper-engine run - Run the waypaper engine application\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine run [OPTIONS]\n"
  printf "  waypaper-engine run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--wayland"
    printf "    force app to run under wayland instead of xwayland.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f"
    printf "    Starts swww in xrgb mode.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine\n"
    printf "  waypaper-engine run\n"
    printf "  waypaper-engine run --wayland\n"
    echo

  fi
}

# :command.usage
waypaper_engine_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine daemon - Run just the waypaper engine daemon\n"
    echo

  else
    printf "waypaper-engine daemon - Run just the waypaper engine daemon\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine daemon [OPTIONS]\n"
  printf "  waypaper-engine daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--format, -f"
    printf "    Starts swww in xrgb mode.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine daemon\n"
    printf "  waypaper-engine daemon --format\n"
    echo

  fi
}

# :command.usage
waypaper_engine_next_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine next-image - Send a request to the daemon to set the next image in the specified playlist\n"
    echo

  else
    printf "waypaper-engine next-image - Send a request to the daemon to set the next image in the specified playlist\n"
    echo

  fi

  printf "Alias: ni\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine next-image [PLAYLIST] [ACTIVE_MONITOR]\n"
  printf "  waypaper-engine next-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PLAYLIST"
    printf "    Send next image command to a specific playlist, if left empty will send the\n    command to all active playlists.\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTIVE_MONITOR"
    printf "    If not specified, will send the next command to all active playlist with the\n    name provided.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine next-image\n"
    printf "  waypaper-engine next-image playlist_name\n"
    printf "  waypaper-engine next-image playlist_name active_monitor\n"
    echo

  fi
}

# :command.usage
waypaper_engine_previous_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine previous-image - Send a request to the daemon to set the previous image in the specified playlist\n"
    echo

  else
    printf "waypaper-engine previous-image - Send a request to the daemon to set the previous image in the specified playlist\n"
    echo

  fi

  printf "Alias: pi\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine previous-image [PLAYLIST] [ACTIVE_MONITOR]\n"
  printf "  waypaper-engine previous-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PLAYLIST"
    printf "    Send previous image command to a specific playlist, if left empty will send\n    the command to all active playlists.\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTIVE_MONITOR"
    printf "    If not specified, will send the previous command to all active playlist with\n    the name provided.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine previous-image\n"
    printf "  waypaper-engine previous-image playlist_name\n"
    printf "  waypaper-engine previous-image playlist_name active_monitor\n"
    echo

  fi
}

# :command.usage
waypaper_engine_kill_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine kill-daemon - Kill the waypaper daemon process\n"
    echo

  else
    printf "waypaper-engine kill-daemon - Kill the waypaper daemon process\n"
    echo

  fi

  printf "Alias: kd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine kill-daemon\n"
  printf "  waypaper-engine kill-daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine kill-daemon\n"
    printf "  waypaper-engine kd\n"
    echo

  fi
}

# :command.usage
waypaper_engine_stop_daemon_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine stop-daemon - Send stop command to daemon process\n"
    echo

  else
    printf "waypaper-engine stop-daemon - Send stop command to daemon process\n"
    echo

  fi

  printf "Alias: sd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine stop-daemon\n"
  printf "  waypaper-engine stop-daemon --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine stop-daemon\n"
    printf "  waypaper-engine sd\n"
    echo

  fi
}

# :command.usage
waypaper_engine_pause_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine pause-playlist - Send a request to the daemon to pause the specified playlist\n"
    echo

  else
    printf "waypaper-engine pause-playlist - Send a request to the daemon to pause the specified playlist\n"
    echo

  fi

  printf "Alias: pp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine pause-playlist [PLAYLIST] [ACTIVE_MONITOR]\n"
  printf "  waypaper-engine pause-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PLAYLIST"
    printf "    Send pause command to a specific playlist, if left empty will send the\n    command to all active playlists.\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTIVE_MONITOR"
    printf "    If not specified, will send the pause command to all active playlist with\n    the name provided.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine pause-playlist\n"
    printf "  waypaper-engine pause-playlist playlist_name\n"
    printf "  waypaper-engine pause-playlist_name playlist active_monitor\n"
    echo

  fi
}

# :command.usage
waypaper_engine_resume_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine resume-playlist - Send a request to the daemon to resume the specified playlist\n"
    echo

  else
    printf "waypaper-engine resume-playlist - Send a request to the daemon to resume the specified playlist\n"
    echo

  fi

  printf "Alias: rp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine resume-playlist [PLAYLIST] [ACTIVE_MONITOR]\n"
  printf "  waypaper-engine resume-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PLAYLIST"
    printf "    Send resume command to a specific playlist, if left empty will send the\n    command to all active playlists.\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTIVE_MONITOR"
    printf "    If not specified, will send the resume command to all active playlist with\n    the name provided.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine resume-playlist\n"
    printf "  waypaper-engine resume-playlist playlist_name\n"
    printf "  waypaper-engine resume-playlist playlist_name active_monitor\n"
    echo

  fi
}

# :command.usage
waypaper_engine_start_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine start-playlist - Start a playlist from the interactive selection\n"
    echo

  else
    printf "waypaper-engine start-playlist - Start a playlist from the interactive selection\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  waypaper-engine start-playlist\n"
  printf "  waypaper-engine start-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine start-playlist\n"
    echo

  fi
}

# :command.usage
waypaper_engine_stop_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  else
    printf "waypaper-engine stop-playlist - Send a request to the daemon to stop the current playlist\n"
    echo

  fi

  printf "Alias: sp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine stop-playlist [PLAYLIST] [ACTIVE_MONITOR]\n"
  printf "  waypaper-engine stop-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PLAYLIST"
    printf "    Send stop command to a specific playlist, if left empty will send the\n    command to all active playlists.\n"
    echo

    # :argument.usage
    printf "  %s\n" "ACTIVE_MONITOR"
    printf "    If not specified, will send the stop command to all active playlist with the\n    name provided.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine stop-playlist\n"
    printf "  waypaper-engine stop-playlist playlist_name\n"
    printf "  waypaper-engine stop-playlist playlist_name active_monitor\n"
    echo

  fi
}

# :command.usage
waypaper_engine_random_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine random - Set a random image from the gallery\n"
    echo

  else
    printf "waypaper-engine random - Set a random image from the gallery\n"
    echo

  fi

  printf "Alias: ri\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine random\n"
  printf "  waypaper-engine random --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine random\n"
    printf "  waypaper-engine ri\n"
    echo

  fi
}

# :command.usage
waypaper_engine_info_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine info-playlist - Get active playlists diagnostics\n"
    echo

  else
    printf "waypaper-engine info-playlist - Get active playlists diagnostics\n"
    echo

  fi

  printf "Alias: ip\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine info-playlist\n"
  printf "  waypaper-engine info-playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine info-playlist\n"
    printf "  waypaper-engine ip\n"
    echo

  fi
}

# :command.usage
waypaper_engine_info_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine info - Get monitors info and it's currently displayed images.\n"
    echo

  else
    printf "waypaper-engine info - Get monitors info and it's currently displayed images.\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine info\n"
  printf "  waypaper-engine info --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine info\n"
    printf "  waypaper-engine i\n"
    echo

  fi
}

# :command.usage
waypaper_engine_playlist_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine playlist - Launch interactive playlist controller\n"
    echo

  else
    printf "waypaper-engine playlist - Launch interactive playlist controller\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  waypaper-engine playlist\n"
  printf "  waypaper-engine playlist --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine playlist\n"
    printf "  waypaper-engine p\n"
    echo

  fi
}

# :command.usage
waypaper_engine_history_usage() {
  if [[ -n $long_usage ]]; then
    printf "waypaper-engine history - Launch interactive image history\n"
    echo

  else
    printf "waypaper-engine history - Launch interactive image history\n"
    echo

  fi

  printf "Alias: h\n"
  echo

  printf "%s\n" "Usage:"
  printf "  waypaper-engine history\n"
  printf "  waypaper-engine history --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  waypaper-engine history\n"
    printf "  waypaper-engine h\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
waypaper_engine_run_command() {
  # src/run_command.sh
  WAYPAPER_LOCATION="/opt/waypaper-engine/waypaper-engine-bin"
  WAYPAPER_FLAGS="$HOME/.waypaper_engine/flags.conf"
  FORMAT="${args[--format]}"
  WAYLAND="${args[--wayland]}"
  COMMAND="$WAYPAPER_LOCATION"

  if [[ $WAYLAND -eq 1 ]]; then
  	COMMAND="$COMMAND --ozone-platform-hint=wayland"
  fi
  if [[ $FORMAT -eq 1 ]]; then
  	COMMAND="$COMMAND --format"
  fi

  $COMMAND || "Something went wrong"

}

# :command.function
waypaper_engine_daemon_command() {
  # src/daemon_command.sh
  WAYPAPER_LOCATION="/opt/waypaper-engine/waypaper-engine-bin --daemon"

  FORMAT="${args[--format]}"
  COMMAND="$WAYPAPER_LOCATION"

  if [[ $FORMAT -eq 1 ]]; then
  	COMMAND="$COMMAND --format"
  fi

  $COMMAND || "Something went wrong"

}

# :command.function
waypaper_engine_next_image_command() {
  # src/next_image_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"
  PLAYLIST="${args[playlist]}"
  ACTIVE_MONITOR="${args[active_monitor]}"
  COMMAND="next-image"
  COMMAND_ALL="next-image-all"
  execute_command() {
  	local argument="$1"
  	echo "$argument" | jq
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  if [[ -z "$PLAYLIST" ]]; then
  	execute_command "{\"action\": \"$COMMAND_ALL\"}"
  elif [[ -z "$ACTIVE_MONITOR" ]]; then
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\"}}"
  else
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\", \"activeMonitor\":{\"name\":\"$ACTIVE_MONITOR\"}}}"
  fi

}

# :command.function
waypaper_engine_previous_image_command() {
  # src/previous_image_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"
  PLAYLIST="${args[playlist]}"
  ACTIVE_MONITOR="${args[active_monitor]}"
  COMMAND="previous-image"
  COMMAND_ALL="previous-image-all"
  execute_command() {
  	local argument="$1"
  	echo "$argument" | jq
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  if [[ -z "$PLAYLIST" ]]; then
  	execute_command "{\"action\": \"$COMMAND_ALL\"}"
  elif [[ -z "$ACTIVE_MONITOR" ]]; then
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\"}}"
  else
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\", \"activeMonitor\":{\"name\":\"$ACTIVE_MONITOR\"}}}"
  fi

}

# :command.function
waypaper_engine_kill_daemon_command() {
  # src/kill_daemon_command.sh
  echo "# this file is located in 'src/kill_daemon_command.sh'"
  echo "# code for 'waypaper-engine kill-daemon' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
waypaper_engine_stop_daemon_command() {
  # src/stop_daemon_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  echo -n '{"action":"stop-daemon"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH >/dev/null || "Something went wrong"

}

# :command.function
waypaper_engine_pause_playlist_command() {
  # src/pause_playlist_command.sh
  echo "# this file is located in 'src/pause_playlist_command.sh'"
  echo "# code for 'waypaper-engine pause-playlist' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
waypaper_engine_resume_playlist_command() {
  # src/resume_playlist_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"
  PLAYLIST="${args[playlist]}"
  ACTIVE_MONITOR="${args[active_monitor]}"
  COMMAND="resume-playlist"
  COMMAND_ALL="resume-playlist-all"
  execute_command() {
  	local argument="$1"
  	echo "$argument" | jq
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  if [[ -z "$PLAYLIST" ]]; then
  	execute_command "{\"action\": \"$COMMAND_ALL\"}"
  elif [[ -z "$ACTIVE_MONITOR" ]]; then
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\"}}"
  else
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\", \"activeMonitor\":{\"name\":\"$ACTIVE_MONITOR\"}}}"
  fi

}

# :command.function
waypaper_engine_start_playlist_command() {
  # src/start_playlist_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  execute_command() {
  	local argument="$1"
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  PLAYLISTS=$(echo -n '{"action":"get-info-playlist"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq)
  SELECTED_PLAYLIST=$(echo "$PLAYLISTS" | jq ".[]" -c | fzf --border sharp --reverse --no-height --header "Select a playlists" --preview "printf %s {} | jq" -e)
  MONITORS=$(echo -n '{"action":"get-info"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq)
  SELECTED_MONITORS=$(echo "$MONITORS" | jq ".[]" -c | fzf --border sharp --reverse --no-height --multi --header "Select a monitor" --preview "printf %s {} | jq" -e | jq -s "sort_by(.position.x)")
  NAMES=$(echo "$SELECTED_MONITORS" | jq -r 'map(.name) | join(",")')
  MODES=("extend" "clone")
  if [ "$(echo "$SELECTED_MONITORS" | jq length)" -gt 1 ]; then
  	SELECTED_MODE=$(printf "%s\n" "${MODES[@]}" | fzf --border sharp --reverse --no-height --header "Select monitor mode" --preview "printf %s {}" -e)
  	if [ "$SELECTED_MODE" == "extend" ]; then
  		# If it is, set the boolean variable to true
  		EXTEND=true
  	else
  		# Otherwise, set it to false
  		EXTEND=false
  	fi
  else
  	EXTEND=false
  fi
  COMMAND=$(echo "$SELECTED_PLAYLIST" | jq -rc "{action:\"start-playlist\",playlist:{name:.playlist.name,activeMonitor:{name:\"$NAMES\",monitors:$SELECTED_MONITORS,extendAcrossMonitors:$EXTEND}}}")

  execute_command "$COMMAND"

}

# :command.function
waypaper_engine_stop_playlist_command() {
  # src/stop_playlist_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"
  PLAYLIST="${args[playlist]}"
  ACTIVE_MONITOR="${args[active_monitor]}"
  COMMAND="stop-playlist"
  COMMAND_ALL="stop-playlist-all"
  COMMAND_NAME="stop-playlist-by-name"
  execute_command() {
  	local argument="$1"
  	echo "$argument" | jq
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  if [[ -z "$PLAYLIST" ]]; then
  	execute_command "{\"action\": \"$COMMAND_ALL\"}"
  elif [[ -z "$ACTIVE_MONITOR" ]]; then
  	execute_command "{\"action\": \"$COMMAND_NAME\", \"playlist\": {\"name\": \"$PLAYLIST\"}}"
  else
  	execute_command "{\"action\": \"$COMMAND\", \"playlist\": {\"name\": \"$PLAYLIST\", \"activeMonitor\":{\"name\":\"$ACTIVE_MONITOR\"}}}"
  fi

}

# :command.function
waypaper_engine_random_command() {
  # src/random_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  echo -n '{"action":"random-image"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH >/dev/null || "Something went wrong"

}

# :command.function
waypaper_engine_info_playlist_command() {
  # src/info_playlist_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  echo -n '{"action":"get-info-active-playlist"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || "Something went wrong"

}

# :command.function
waypaper_engine_info_command() {
  # src/info_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  echo -n '{"action":"get-info"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || "Something went wrong"

}

# :command.function
waypaper_engine_playlist_command() {
  # src/playlist_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  execute_command() {
  	local argument="$1"
  	echo "$argument"
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  ACTIVE_PLAYLISTS=$(echo -n '{"action":"get-info-active-playlist"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq)
  SELECTED_PLAYLIST=$(echo "$ACTIVE_PLAYLISTS" | jq ".[]" -c | fzf --border sharp --reverse --no-height --header "Active Playlists" --preview "printf %s {} | jq" -e)
  COMMANDS=("next-image" "previous-image" "stop-playlist" "resume-playlist" "pause-playlist")
  SELECTED_COMMAND=$(printf "%s\n" "${COMMANDS[@]}" | fzf --border sharp --reverse --no-height --header "Select command" --preview "printf %s {}" -e)
  COMMAND=$(echo "$SELECTED_PLAYLIST" | jq "{action:\"$SELECTED_COMMAND\",playlist:{name:.playlistName,activeMonitor:.playlistActiveMonitor}}" -rc)
  execute_command "$COMMAND"

}

# :command.function
waypaper_engine_history_command() {
  # src/history_command.sh
  WAYPAPER_ENGINE_DAEMON_SOCKET_PATH="/tmp/waypaper_engine_daemon.sock"

  execute_command() {
  	local argument="$1"
  	echo -n "$argument" | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || {
  		echo "Something went wrong"
  		exit 1
  	}
  }

  HISTORY=$(echo -n '{"action":"get-image-history"}' | socat - UNIX-CONNECT:$WAYPAPER_ENGINE_DAEMON_SOCKET_PATH | jq || "Something went wrong")
  SELECTED_OBJECT=$(echo "$HISTORY" | jq ".[]" -c | fzf --border sharp --reverse --no-height --header "Select image to set" --preview "printf %s {} | jq" -e)
  COMMAND=$(echo "$SELECTED_OBJECT" | jq "{action:\"set-image\",image:.Images,activeMonitor:.imageHistory.monitor}" -rc)

  execute_command "$COMMAND"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        waypaper_engine_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    run | r)
      action="run"
      shift
      waypaper_engine_run_parse_requirements "$@"
      shift $#
      ;;

    daemon | d)
      action="daemon"
      shift
      waypaper_engine_daemon_parse_requirements "$@"
      shift $#
      ;;

    next-image | ni)
      action="next-image"
      shift
      waypaper_engine_next_image_parse_requirements "$@"
      shift $#
      ;;

    previous-image | pi)
      action="previous-image"
      shift
      waypaper_engine_previous_image_parse_requirements "$@"
      shift $#
      ;;

    kill-daemon | kd)
      action="kill-daemon"
      shift
      waypaper_engine_kill_daemon_parse_requirements "$@"
      shift $#
      ;;

    stop-daemon | sd)
      action="stop-daemon"
      shift
      waypaper_engine_stop_daemon_parse_requirements "$@"
      shift $#
      ;;

    pause-playlist | pp)
      action="pause-playlist"
      shift
      waypaper_engine_pause_playlist_parse_requirements "$@"
      shift $#
      ;;

    resume-playlist | rp)
      action="resume-playlist"
      shift
      waypaper_engine_resume_playlist_parse_requirements "$@"
      shift $#
      ;;

    start-playlist)
      action="start-playlist"
      shift
      waypaper_engine_start_playlist_parse_requirements "$@"
      shift $#
      ;;

    stop-playlist | sp)
      action="stop-playlist"
      shift
      waypaper_engine_stop_playlist_parse_requirements "$@"
      shift $#
      ;;

    random | ri)
      action="random"
      shift
      waypaper_engine_random_parse_requirements "$@"
      shift $#
      ;;

    info-playlist | ip)
      action="info-playlist"
      shift
      waypaper_engine_info_playlist_parse_requirements "$@"
      shift $#
      ;;

    info | i)
      action="info"
      shift
      waypaper_engine_info_parse_requirements "$@"
      shift $#
      ;;

    playlist)
      action="playlist"
      shift
      waypaper_engine_playlist_parse_requirements "$@"
      shift $#
      ;;

    history | h)
      action="history"
      shift
      waypaper_engine_history_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      waypaper_engine_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --wayland)

        # :flag.case_no_arg
        args['--wayland']=1
        shift
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_no_arg
        args['--format']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --format | -f)

        # :flag.case_no_arg
        args['--format']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_next_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_next_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="next-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['playlist']+x} ]]; then

          args['playlist']=$1
          shift
        elif [[ -z ${args['active_monitor']+x} ]]; then

          args['active_monitor']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_previous_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_previous_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="previous-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['playlist']+x} ]]; then

          args['playlist']=$1
          shift
        elif [[ -z ${args['active_monitor']+x} ]]; then

          args['active_monitor']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_kill_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_kill_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="kill-daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_stop_daemon_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_stop_daemon_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-daemon"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_pause_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_pause_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="pause-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['playlist']+x} ]]; then

          args['playlist']=$1
          shift
        elif [[ -z ${args['active_monitor']+x} ]]; then

          args['active_monitor']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_resume_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_resume_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="resume-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['playlist']+x} ]]; then

          args['playlist']=$1
          shift
        elif [[ -z ${args['active_monitor']+x} ]]; then

          args['active_monitor']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_start_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_start_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_stop_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_stop_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['playlist']+x} ]]; then

          args['playlist']=$1
          shift
        elif [[ -z ${args['active_monitor']+x} ]]; then

          args['active_monitor']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_random_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_random_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="random"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_info_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_info_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="info-playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_info_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_info_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="info"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_playlist_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_playlist_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="playlist"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
waypaper_engine_history_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        waypaper_engine_history_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="history"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="2.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "run") waypaper_engine_run_command ;;
    "daemon") waypaper_engine_daemon_command ;;
    "next-image") waypaper_engine_next_image_command ;;
    "previous-image") waypaper_engine_previous_image_command ;;
    "kill-daemon") waypaper_engine_kill_daemon_command ;;
    "stop-daemon") waypaper_engine_stop_daemon_command ;;
    "pause-playlist") waypaper_engine_pause_playlist_command ;;
    "resume-playlist") waypaper_engine_resume_playlist_command ;;
    "start-playlist") waypaper_engine_start_playlist_command ;;
    "stop-playlist") waypaper_engine_stop_playlist_command ;;
    "random") waypaper_engine_random_command ;;
    "info-playlist") waypaper_engine_info_playlist_command ;;
    "info") waypaper_engine_info_command ;;
    "playlist") waypaper_engine_playlist_command ;;
    "history") waypaper_engine_history_command ;;
  esac
}

initialize
run "$@"
